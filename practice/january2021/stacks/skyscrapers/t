so, in O(N^2), you can just select a certain element, and then go left and right and then decrease the heights as you go
then just find the maximum possible sum of heights as you go.

let's try to find some observations about how to optimize it with a stack for a time complexity of O(N)

for a stack to work, there has to hodl some kind of relationship with the left and the right pointer of the stack's top element and the current element -> basically what this means is that some recurrence has to hold on the left side such that you don't have to check the other elements

formally, if you're at a_j and the top element on the stack is a_i, then you don't have to check the element a_(i-1), a_(i-2), ...

basically just the histogram problem, except you are trying to find the elements that are greater rather than the elements that are smaller?

U  UU  
U UUU U
UUUUU U
UUUUUUU

U  U
U UU
UUUU
UUUU

{4} -> 4 * (i) -> 4
{2} -> 2 * (i + 1) -> 2
{2, 3} -> 2 * (i + 1) + 3 -> 7

U
UU U
UUUU
UUUU

{4}
{3}
{2}
{2, 3}

def l_area[] -> the area to the left of the i-th index
define i as the index of the top of the stack and h_i as the height of the top of the stack and j as the current

from i -> j it is guaranteed to be a non-decreasing function

h_j < h_i && j > i:
area[0] = 4
area[1] = area[0] - (h_1 - h_0) * (1 - 0) + h_1 -> 4 - (1) * (1) + 3 -> 6
area[2] = area[1] - (h_2 - h_1) * (2 - 1) + h_2 -> 6 - (1) * (1) + 2 -> 7
area[3] = area[2] - (h_3 - h_2) * (3 - 2) + h_3

what's the area to the left, and what's the area to the right(treat each direction as separate):

6
1 2 1 3 3 1
